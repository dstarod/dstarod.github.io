<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Круг интересов</title><link>/posts/</link><description>Recent content in Posts on Круг интересов</description><generator>Hugo</generator><language>ru-RU</language><lastBuildDate>Sun, 26 Oct 2025 20:51:37 +0300</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Восстановление флешки</title><link>/posts/flash-drive-recover/</link><pubDate>Sun, 26 Oct 2025 20:51:37 +0300</pubDate><guid>/posts/flash-drive-recover/</guid><description>&lt;p&gt;Пытаясь залить образ Ubuntu официально рекомендуемая софтина загубила флешку. Дисковая утилита MacOS сообщала, что ничего не может поделать.
Решаем проблему средствами консольной утилиты.&lt;/p&gt;
&lt;p&gt;Посмотреть список дисков (среди них будет фигурировать и флешка):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;diskutil list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Теперь стираем ее и форматируем в FAT32:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;diskutil eraseDisk FAT32 myDrive MBRFormat /dev/disk4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Спасибо, интернет.&lt;/p&gt;</description></item><item><title>Плагин для Obsidian - Time Sum</title><link>/posts/obsidian-plugin-timesum/</link><pubDate>Thu, 09 Oct 2025 15:39:48 +0300</pubDate><guid>/posts/obsidian-plugin-timesum/</guid><description>&lt;p&gt;Без долгих вступлений. Мне понадобился плагин, чтобы все записи типа &lt;code&gt;(1h 25m)&lt;/code&gt; в заметке выводил суммарно. Готовых не нашел, быстренько с Gemini CLI наваял. Так что кому вдруг надо - &lt;a href="https://github.com/dstarod/obsidian-time-sum"&gt;он тут&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Как это выглядит: пишете допустим дейли-заметку по работе, и нужно чтобы в конце дня было понятно, сколько времени ушло на дела а сколько просто так без толку потрачено. Пишем, например:&lt;/p&gt;</description></item><item><title>Скрипт массового изменения ID3 для mp3</title><link>/posts/console-mp3-tags/</link><pubDate>Tue, 12 Aug 2025 21:10:47 +0300</pubDate><guid>/posts/console-mp3-tags/</guid><description>&lt;p&gt;Задача: поменять в каталоге теги всем mp3-файлам, основываясь на именах файлов и папок, используя консольные утилиты.&lt;/p&gt;
&lt;p&gt;Окружение: MacOS (тут без разницы, линукс идентично), &lt;a href="https://fishshell.com"&gt;fishshell&lt;/a&gt;, &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt;, &lt;a href="https://formulae.brew.sh/formula/mp3info"&gt;mp3info&lt;/a&gt;, &lt;a href="https://eyed3.readthedocs.io/en/v0.9.8/"&gt;eyeD3&lt;/a&gt;. Fish у меня основная оболочка, для других синтаксис чуть изменится, но не суть.&lt;/p&gt;
&lt;p&gt;Итак. У меня каталог, который называется как дата в формате YYYY-MM-DD, в нем mp3-файлы с именами в формате &amp;ldquo;НомерПробелИмятрека.mp3&amp;rdquo;. Нужно будет получить имя папки для даты, кусочек имени файла до пробела для номера трека, все остальное кроме расширения - имя трека.
Создаем функцию (конечно в файлике &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;), заходим в нужную папку, запускаем. Текст функции:&lt;/p&gt;</description></item><item><title>MCP-сервер для ИИ-агента</title><link>/posts/mcp-server-ai-agent-python/</link><pubDate>Wed, 09 Jul 2025 15:51:32 +0300</pubDate><guid>/posts/mcp-server-ai-agent-python/</guid><description>&lt;p&gt;Совсем недавно я рассказывал о том, &lt;a href="https://dstarod.github.io/posts/ai-agent-python-with-langchain-and-tools/"&gt;как создать ИИ-агента и дать ему в руки инструменты&lt;/a&gt;, чтобы взаимодействовать с реальным миром. Сегодня я покажу пример, как сделать шаг вперед - создать MCP-сервер, который будет предоставлять инструменты для LLM в согласии с современными стандартами отрасли. О том, что это такое и откуда у него растут ножки, можно почитать в интернетах, или &lt;a href="https://www.perplexity.ai/search/212a11a5-84dd-4f7b-b697-f1162384c2a3"&gt;вот вам собранная Perplexity статья&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Obsidian плагин Shell commands</title><link>/posts/obsidian-plugin-shell-commands/</link><pubDate>Mon, 07 Jul 2025 14:54:57 +0300</pubDate><guid>/posts/obsidian-plugin-shell-commands/</guid><description>&lt;p&gt;Если вы хотели расширить возможности &lt;a href="https://obsidian.md"&gt;Obsidian&lt;/a&gt;, подходящих готовых плагинов не нашли, писать на Typescript морально не готовы, а писать консольные утилиты любите умеете и практикуете, то этот пост для вас.
Не так давно натолкнулся у какого-то блогера упоминание о плагине &lt;a href="https://publish.obsidian.md/shellcommands/Index"&gt;Shell commans&lt;/a&gt;, с помощью которого можно вызвать консольную команду. Взглянув на него повнимательнее я понял - это неограненный алмаз, недооцененный артефакт, и даже удивительно, почему так мало о нем говорят.&lt;/p&gt;</description></item><item><title>Создание ИИ-агента на Python</title><link>/posts/ai-agent-python-with-langchain-and-tools/</link><pubDate>Sat, 05 Jul 2025 16:00:07 +0300</pubDate><guid>/posts/ai-agent-python-with-langchain-and-tools/</guid><description>&lt;p&gt;ИИ шагает по планете с такой скоростью, что это пугает. Но лучше не пугаться, а постараться вспрыгнуть на эту волну и прокатиться на ней.
Самое популярное, с чем мы сталкиваемся каждый день - это LLM (Large Language Model), говорящие ИИ-боты. Они много что могут нам рассказать, но вот ручек и ножек им не завезли.
Другое дело - ИИ-агенты, это по сути те-же LLM, но с ручками и ножками. То есть с инструментами.
Имея доступ к LLM (публичной или локальной) можно своими руками приделать им недостающие конечности и соорудить маленького, но своего Джарвиса.
Я продемонстрирую, как это сделать с помощью Python и библиотеки &lt;a href="https://www.langchain.com"&gt;LangChain&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Превращаем заметки Obsidian в посты Telegraph</title><link>/posts/obsidian-to-telegraph/</link><pubDate>Sat, 05 Jul 2025 13:21:43 +0300</pubDate><guid>/posts/obsidian-to-telegraph/</guid><description>&lt;p&gt;Чтобы писать посты в &lt;a href="https://obsidian.md"&gt;Obsidian&lt;/a&gt; и постить в Telegraph прям с таблицами, Dataview и прочими плюшками, достаточно копировать заметку в HTML с помощью плагина &lt;a href="https://github.com/mvdkwast/obsidian-copy-as-html"&gt;Copy Document as HTML&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ставим плагин и настраиваем как хочется:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;убираем front-matter (Remove properties)&lt;/li&gt;
&lt;li&gt;вшиваем картинки (Embed external images)&lt;/li&gt;
&lt;li&gt;вики-ссылки делаем просто текстом (Link handling: Don&amp;rsquo;t link)&lt;/li&gt;
&lt;li&gt;убираем лишние добавки к заметке (Footnote handling: Remove everything)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Чтобы запустить вызываем команду (&lt;code&gt;Cmd-P&lt;/code&gt;): &lt;strong&gt;Copy document as HTML: Copy selection or document to clipboard&lt;/strong&gt;. Это отправит в буфер обмена или выделенный фрагмент (если выделено что-то) или весь документ.&lt;/p&gt;</description></item><item><title>Скрипт конвертации Perplexity ссылок</title><link>/posts/perplexity-copy-links-markdown-convert/</link><pubDate>Tue, 01 Jul 2025 20:45:42 +0300</pubDate><guid>/posts/perplexity-copy-links-markdown-convert/</guid><description>&lt;p&gt;К сожалению, когда копируешь (кнопкой &amp;ldquo;Копировать&amp;rdquo;) исследования Perplexity он генерирует документы, которые не совсем Markdown - ссылки на источники он помещает в конце документа, а в тексте остаются только некликабельные указатели типа &lt;code&gt;[10]&lt;/code&gt;. Это неудобно, если хочешь поместить исследование например в Obsidian.
Нагенерил скрипт, который это исправляет. Не сильно фонтан, но может кому сэкономит немного времени.&lt;/p&gt;</description></item><item><title>Превращаем заметки Obsidian в посты Hugo</title><link>/posts/obsidian2hugo/</link><pubDate>Mon, 30 Jun 2025 17:52:25 +0300</pubDate><guid>/posts/obsidian2hugo/</guid><description>&lt;p&gt;Когда решил вернуться к написанию постов в блог, решил перевести его на генерацию статических сайтов &lt;a href="https://gohugo.io"&gt;Hugo&lt;/a&gt;. А так как к тому моменту я успел полюбить &lt;a href="https://obsidian.md"&gt;Obsidian&lt;/a&gt;, то стал решать, как бы так сделать, чтобы писать статьи в нем, а в Hugo транслировать с нужными модификациями. Готовые решения меня не устроили (то одно не так то другое не то), решил сделать что-то свое. Плагин для Obsidian не осилил (никогда не писал на TypeScript), поэтому с помощью ИИ накидал варианты на Python и Go. Скачать можно &lt;a href="https://github.com/dstarod/obsidian2hugo"&gt;с моего GitHub&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Консольный ИИ-агент Gemini CLI</title><link>/posts/gemini-cli-howto/</link><pubDate>Sun, 29 Jun 2025 19:10:14 +0300</pubDate><guid>/posts/gemini-cli-howto/</guid><description>&lt;p&gt;Gemini CLI - консольный ИИ-агент от Google. Работает с моделью &lt;code&gt;gemini-2.5-pro&lt;/code&gt;. Позволяет делать бесплатно 1000 запросов в день и дает контекстное окно в миллион токенов. Умеет работать с файловой системой на компьютере, делать запросы в интернете и пользоваться поисковиком Google.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Что немаловажно: работает в России.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Использование цикла в PostgreSQL с выводом в консоль</title><link>/posts/postgres-do-loop-notice/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0300</pubDate><guid>/posts/postgres-do-loop-notice/</guid><description>&lt;p&gt;Небольшая заметка на полях на будущее. Иногда в PostgreSQL нужно выполнить ряд повторяющихся действий с выводом результатов в лог.
Одним примером покажу, как это сделать легко и просто.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#93a1a1;font-style:italic"&gt;-- Делаем вывод сообщений в лог видимым
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#93a1a1;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#859900"&gt;SET&lt;/span&gt; &lt;span style="color:#268bd2"&gt;client_min_messages&lt;/span&gt; &lt;span style="color:#859900"&gt;TO&lt;/span&gt; &lt;span style="color:#268bd2"&gt;notice&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#859900"&gt;CREATE&lt;/span&gt; &lt;span style="color:#268bd2"&gt;TEMP&lt;/span&gt; &lt;span style="color:#859900"&gt;TABLE&lt;/span&gt; &lt;span style="color:#268bd2"&gt;tmp&lt;/span&gt;(&lt;span style="color:#268bd2"&gt;id&lt;/span&gt; &lt;span style="color:#cb4b16"&gt;SERIAL&lt;/span&gt;, &lt;span style="color:#268bd2"&gt;name&lt;/span&gt; &lt;span style="color:#cb4b16"&gt;TEXT&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#93a1a1;font-style:italic"&gt;-- Анонимный блок DO
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#93a1a1;font-style:italic"&gt;&lt;/span&gt;&lt;span style="color:#859900"&gt;DO&lt;/span&gt; $$
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#859900"&gt;BEGIN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#93a1a1;font-style:italic"&gt;-- Цикл LOOP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#93a1a1;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#268bd2"&gt;LOOP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#859900"&gt;INSERT&lt;/span&gt; &lt;span style="color:#859900"&gt;INTO&lt;/span&gt; &lt;span style="color:#268bd2"&gt;tmp&lt;/span&gt;(&lt;span style="color:#268bd2"&gt;name&lt;/span&gt;) &lt;span style="color:#859900"&gt;VALUES&lt;/span&gt;(&lt;span style="color:#268bd2"&gt;gen_random_uuid&lt;/span&gt;()::&lt;span style="color:#cb4b16"&gt;TEXT&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#93a1a1;font-style:italic"&gt;-- Условный оператор IF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#93a1a1;font-style:italic"&gt;&lt;/span&gt; &lt;span style="color:#859900"&gt;IF&lt;/span&gt; (&lt;span style="color:#859900"&gt;SELECT&lt;/span&gt; &lt;span style="color:#859900"&gt;MAX&lt;/span&gt;(&lt;span style="color:#268bd2"&gt;id&lt;/span&gt;) &lt;span style="color:#859900"&gt;FROM&lt;/span&gt; &lt;span style="color:#268bd2"&gt;tmp&lt;/span&gt;) &amp;gt; &lt;span style="color:#2aa198;font-weight:bold"&gt;100&lt;/span&gt; &lt;span style="color:#859900"&gt;THEN&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#268bd2"&gt;RAISE&lt;/span&gt; &lt;span style="color:#268bd2"&gt;NOTICE&lt;/span&gt; &lt;span style="color:#2aa198"&gt;&amp;#39;max id == %&amp;#39;&lt;/span&gt;, (&lt;span style="color:#859900"&gt;SELECT&lt;/span&gt; &lt;span style="color:#859900"&gt;COUNT&lt;/span&gt;(*) &lt;span style="color:#859900"&gt;FROM&lt;/span&gt; &lt;span style="color:#268bd2"&gt;tmp&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#268bd2"&gt;EXIT&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#859900"&gt;END&lt;/span&gt; &lt;span style="color:#859900"&gt;IF&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#859900"&gt;END&lt;/span&gt; &lt;span style="color:#268bd2"&gt;LOOP&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#859900"&gt;END&lt;/span&gt; $$;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>Intellij IDEA - сброс триального периода</title><link>/posts/idea-trial/</link><pubDate>Fri, 21 Jun 2019 00:00:00 +0300</pubDate><guid>/posts/idea-trial/</guid><description>&lt;p&gt;Аж в 2016 году я тут писал о том, &lt;a href="https://dstarod.github.io/posts/remove-idea-completely/"&gt;как удалить Idea полностью&lt;/a&gt;, чтобы начать все с начала.
Но времена меняются, и что работало раньше - не работает сейчас. Вот обновленный алгоритм для MacOS. Обратите внимание на версию Idea.&lt;/p&gt;
&lt;p&gt;Удаляем файлы и каталоги:&lt;/p&gt;</description></item><item><title>Создание валидной цепочки SSL сертификатов</title><link>/posts/fake-ssl-cert-chain/</link><pubDate>Thu, 17 Aug 2017 00:00:00 +0300</pubDate><guid>/posts/fake-ssl-cert-chain/</guid><description>&lt;p&gt;Для написания тестов на валидность загружаемых сертификатов мне потребовалось создать несколько вариантов
цепочек и приватных ключей. Прошерстив некоторый объем интернета, я собрал всю необходимую информацию о том,
как локально сгенерировать корректную цепочку SSL сертификатов, которая будет проходить проверку стандартными
средствами.&lt;/p&gt;
&lt;p&gt;Чтобы не писать кучу команд всякий раз, напишем bash-скрипт. Для начала, зададим несколько настроечных констант:&lt;/p&gt;</description></item><item><title>Удобные команды и алиасы для GIT</title><link>/posts/git-tricks-and-aliases-with-fish/</link><pubDate>Thu, 27 Jul 2017 00:00:00 +0300</pubDate><guid>/posts/git-tricks-and-aliases-with-fish/</guid><description>&lt;p&gt;Несколько удобных алиасов для git, чтобы не потерять, положу это здесь.
Я использую оболочку &lt;a href="https://fishshell.com/"&gt;fish&lt;/a&gt;, поэтому возможно какие-то команды потребуется адаптировать для вашей.
Шикарный набор советов &lt;a href="https://github.com/git-tips/tips"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Лог в виде дерева:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#859900"&gt;function&lt;/span&gt; gl
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; git log --oneline --decorate --graph --all
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Интерактивный rebase с указанного в аргументах коммита:&lt;/p&gt;</description></item><item><title>Плагин для Sublime Text своими руками</title><link>/posts/sublime-plugin-dict-to-json/</link><pubDate>Thu, 13 Apr 2017 00:00:00 +0300</pubDate><guid>/posts/sublime-plugin-dict-to-json/</guid><description>&lt;p&gt;Не секрет, что одним из самых популярных редакторов кода у разработчиков на сегодняшний день
является &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;. Кроме своих индивидуальных киллер-фич,
которые вскоре стали копировать разработчики других продуктов той-же ниши
(например, мультиредактирование), он хорош своей расширяемостью плагинами, коих великое множество на любой вкус. Думаю, не последней причиной такого их количества является простота создания. Для примера возьмем и напишем полезный инструмент, который будет брать как попало отформатированный Python-словарь и выдавать JSON стройными рядами.&lt;/p&gt;</description></item><item><title>Как остановить зависшую транзакцию в PostgreSQL</title><link>/posts/terminate-transaction-lock-postgres/</link><pubDate>Mon, 09 Jan 2017 00:00:00 +0300</pubDate><guid>/posts/terminate-transaction-lock-postgres/</guid><description>&lt;p&gt;Сегодня PostgreSQL является одной из самых популярных СУБД, и, судя по новостям, многие крупные конторы переходят на ее использование
с коммерческих продуктов признанных лидеров софтверного фронта. Поэтому думаю, что пошаговое решение ситуации с остановкой зависшей
транзакции будет полезно многим. Я столкнулся с таковой, применяя транзакцию, создающую внешний ключ к заблокированной таблице.&lt;/p&gt;</description></item><item><title>Полное удаление Intellij IDEA или Вечный Триал</title><link>/posts/remove-idea-completely/</link><pubDate>Wed, 21 Sep 2016 00:00:00 +0300</pubDate><guid>/posts/remove-idea-completely/</guid><description>&lt;p&gt;Одна из самых шикарных IDE для full-stack разработки - Intellij IDEA. Community версия бесплатна, и для разработки на Java/Android ее хватит за глаза.
А если приходится писать на Python, PL/SQL, Groovy, JavaScript, и еще горсточке языков? Тут только Professional вариант, вот только он стоит денег, хоть он того и стоит.
Конечно, для начала вам предлагается пробный период на месяц, в течении которого можно успеть по достоинству оценить эту IDE.
Но что, если пробный период закончился, а денег на приобретение все еще нет?&lt;/p&gt;</description></item><item><title>Python и пляски с процессами</title><link>/posts/python-grandchilds/</link><pubDate>Thu, 01 Sep 2016 00:00:00 +0300</pubDate><guid>/posts/python-grandchilds/</guid><description>&lt;p&gt;Про использование нескольких процессов в Python уже написано невообразимое множество статей, хороших и не очень;
сломано немало копий в обсуждении проблемы GIL и псевдопотоков. Я же просто хочу рассказать о том, как решалась
задача с управлением небольшого дерева дочерних процессов.&lt;/p&gt;
&lt;p&gt;Итак, исходная ситуация. Основной процесс запускает два дочерних, используя &lt;code&gt;multiprocessing.Process&lt;/code&gt;, передает туда
очередь &lt;code&gt;multiprocessing.Queue&lt;/code&gt;. Первый дочерний процесс просто собирает какие-то данные и пишет в очередь,
второй же запускает еще несколько процессов, куда передает ту-же очередь, с которой они и работают.&lt;/p&gt;</description></item><item><title>Python NLTK + Stanford NLP</title><link>/posts/python-nltk-stanford-nlp/</link><pubDate>Fri, 29 Jan 2016 00:00:00 +0300</pubDate><guid>/posts/python-nltk-stanford-nlp/</guid><description>&lt;p&gt;Как известно, в Python стандартом работы с натуральным языком де-факто является NLTK. Несмотря на это, я довольно долго использовал Pattern от CLiPS из-за его простоты и скорости (многие отмечают тормознутость NLTK).&lt;/p&gt;
&lt;p&gt;Но наступил момент, когда почти вся кодовая база была успешно портирована на Python 3.5, а разработчики Pattern так и не сделали версию с поддержкой третьей версии. И, судя по всему, не собираются.&lt;/p&gt;</description></item><item><title>Postgres: generate the most large followers intersections</title><link>/posts/postgres-generate-most-large-followers/</link><pubDate>Tue, 19 Jan 2016 00:00:00 +0300</pubDate><guid>/posts/postgres-generate-most-large-followers/</guid><description>&lt;p&gt;Задача: получить список пользователей твиттера, с которыми у одного из них есть общие фоловеры, и отсортировать по их количеству. Лучше всего продемонстрировать на примере. Создадим таблицу с идентификаторами пользователей и фоловеров:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#859900"&gt;CREATE&lt;/span&gt; &lt;span style="color:#268bd2"&gt;TEMP&lt;/span&gt; &lt;span style="color:#859900"&gt;TABLE&lt;/span&gt; &lt;span style="color:#268bd2"&gt;f&lt;/span&gt;(&lt;span style="color:#268bd2"&gt;uid&lt;/span&gt; &lt;span style="color:#cb4b16"&gt;INT&lt;/span&gt;, &lt;span style="color:#268bd2"&gt;fid&lt;/span&gt; &lt;span style="color:#cb4b16"&gt;INT&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#859900"&gt;INSERT&lt;/span&gt; &lt;span style="color:#859900"&gt;INTO&lt;/span&gt; &lt;span style="color:#268bd2"&gt;f&lt;/span&gt;(&lt;span style="color:#268bd2"&gt;uid&lt;/span&gt;, &lt;span style="color:#268bd2"&gt;fid&lt;/span&gt;) &lt;span style="color:#859900"&gt;VALUES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#2aa198;font-weight:bold"&gt;1&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;10&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;1&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;11&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;1&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;12&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;1&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;13&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;1&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;14&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#2aa198;font-weight:bold"&gt;2&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;10&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;2&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;11&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;2&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;12&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#2aa198;font-weight:bold"&gt;3&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;13&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;3&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;14&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#2aa198;font-weight:bold"&gt;4&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;13&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;4&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;14&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;4&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;10&lt;/span&gt;), (&lt;span style="color:#2aa198;font-weight:bold"&gt;4&lt;/span&gt;, &lt;span style="color:#2aa198;font-weight:bold"&gt;11&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;А вот собственно и запрос, интересуют пересечения с пользователем 2, самые большие сверху.&lt;/p&gt;</description></item></channel></rss>