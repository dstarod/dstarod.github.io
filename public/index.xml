<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Круг интересов</title><link>/</link><description>Recent content on Круг интересов</description><generator>Hugo</generator><language>ru-RU</language><lastBuildDate>Mon, 07 Jul 2025 14:54:57 +0300</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Obsidian плагин Shell commands</title><link>/posts/obsidian-plugin-shell-commands/</link><pubDate>Mon, 07 Jul 2025 14:54:57 +0300</pubDate><guid>/posts/obsidian-plugin-shell-commands/</guid><description>&lt;p>Если вы хотели расширить возможности &lt;a href="https://obsidian.md">Obsidian&lt;/a>, подходящих готовых плагинов не нашли, писать на Typescript морально не готовы, а писать консольные утилиты любите умеете и практикуете, то этот пост для вас.
Не так давно натолкнулся у какого-то блогера упоминание о плагине &lt;a href="https://publish.obsidian.md/shellcommands/Index">Shell commans&lt;/a>, с помощью которого можно вызвать консольную команду. Взглянув на него повнимательнее я понял - это неограненный алмаз, недооцененный артефакт, и даже удивительно, почему так мало о нем говорят.&lt;/p></description></item><item><title>Создание ИИ-агента на Python</title><link>/posts/ai-agent-python-with-langchain-and-tools/</link><pubDate>Sat, 05 Jul 2025 16:00:07 +0300</pubDate><guid>/posts/ai-agent-python-with-langchain-and-tools/</guid><description>&lt;p>ИИ шагает по планете с такой скоростью, что это пугает. Но лучше не пугаться, а постараться вспрыгнуть на эту волну и прокатиться на ней.
Самое популярное, с чем мы сталкиваемся каждый день - это LLM (Large Language Model), говорящие ИИ-боты. Они много что могут нам рассказать, но вот ручек и ножек им не завезли.
Другое дело - ИИ-агенты, это по сути те-же LLM, но с ручками и ножками. То есть с инструментами.
Имея доступ к LLM (публичной или локальной) можно своими руками приделать им недостающие конечности и соорудить маленького, но своего Джарвиса.
Я продемонстрирую, как это сделать с помощью Python и библиотеки &lt;a href="https://www.langchain.com">LangChain&lt;/a>.&lt;/p></description></item><item><title>Превращаем заметки Obsidian в посты Telegraph</title><link>/posts/obsidian-to-telegraph/</link><pubDate>Sat, 05 Jul 2025 13:21:43 +0300</pubDate><guid>/posts/obsidian-to-telegraph/</guid><description>&lt;p>Чтобы писать посты в &lt;a href="https://obsidian.md">Obsidian&lt;/a> и постить в Telegraph прям с таблицами, Dataview и прочими плюшками, достаточно копировать заметку в HTML с помощью плагина &lt;a href="https://github.com/mvdkwast/obsidian-copy-as-html">Copy Document as HTML&lt;/a>&lt;/p>
&lt;p>Ставим плагин и настраиваем как хочется:&lt;/p>
&lt;ul>
&lt;li>убираем front-matter (Remove properties)&lt;/li>
&lt;li>вшиваем картинки (Embed external images)&lt;/li>
&lt;li>вики-ссылки делаем просто текстом (Link handling: Don&amp;rsquo;t link)&lt;/li>
&lt;li>убираем лишние добавки к заметке (Footnote handling: Remove everything)&lt;/li>
&lt;/ul>
&lt;p>Чтобы запустить вызываем команду (&lt;code>Cmd-P&lt;/code>): &lt;strong>Copy document as HTML: Copy selection or document to clipboard&lt;/strong>. Это отправит в буфер обмена или выделенный фрагмент (если выделено что-то) или весь документ.&lt;/p></description></item><item><title>Скрипт конвертации Perplexity ссылок</title><link>/posts/perplexity-copy-links-markdown-convert/</link><pubDate>Tue, 01 Jul 2025 20:45:42 +0300</pubDate><guid>/posts/perplexity-copy-links-markdown-convert/</guid><description>&lt;p>К сожалению, когда копируешь (кнопкой &amp;ldquo;Копировать&amp;rdquo;) исследования Perplexity он генерирует документы, которые не совсем Markdown - ссылки на источники он помещает в конце документа, а в тексте остаются только некликабельные указатели типа &lt;code>[10]&lt;/code>. Это неудобно, если хочешь поместить исследование например в Obsidian.
Нагенерил скрипт, который это исправляет. Не сильно фонтан, но может кому сэкономит немного времени.&lt;/p></description></item><item><title>Превращаем заметки Obsidian в посты Hugo</title><link>/posts/obsidian2hugo/</link><pubDate>Mon, 30 Jun 2025 17:52:25 +0300</pubDate><guid>/posts/obsidian2hugo/</guid><description>&lt;p>Когда решил вернуться к написанию постов в блог, решил перевести его на генерацию статических сайтов &lt;a href="https://gohugo.io">Hugo&lt;/a>. А так как к тому моменту я успел полюбить &lt;a href="https://obsidian.md">Obsidian&lt;/a>, то стал решать, как бы так сделать, чтобы писать статьи в нем, а в Hugo транслировать с нужными модификациями. Готовые решения меня не устроили (то одно не так то другое не то), решил сделать что-то свое. Плагин для Obsidian не осилил (никогда не писал на TypeScript), поэтому с помощью ИИ накидал варианты на Python и Go. Скачать можно &lt;a href="https://github.com/dstarod/obsidian2hugo">с моего GitHub&lt;/a>.&lt;/p></description></item><item><title>Консольный ИИ-агент Gemini CLI</title><link>/posts/gemini-cli-howto/</link><pubDate>Sun, 29 Jun 2025 19:10:14 +0300</pubDate><guid>/posts/gemini-cli-howto/</guid><description>&lt;p>Gemini CLI - консольный ИИ-агент от Google. Работает с моделью &lt;code>gemini-2.5-pro&lt;/code>. Позволяет делать бесплатно 1000 запросов в день и дает контекстное окно в миллион токенов. Умеет работать с файловой системой на компьютере, делать запросы в интернете и пользоваться поисковиком Google.&lt;/p>
&lt;p>&lt;strong>Что немаловажно: работает в России.&lt;/strong>&lt;/p></description></item><item><title>Использование цикла в PostgreSQL с выводом в консоль</title><link>/posts/postgres-do-loop-notice/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0300</pubDate><guid>/posts/postgres-do-loop-notice/</guid><description>&lt;p>Небольшая заметка на полях на будущее. Иногда в PostgreSQL нужно выполнить ряд повторяющихся действий с выводом результатов в лог.
Одним примером покажу, как это сделать легко и просто.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#93a1a1;font-style:italic">-- Делаем вывод сообщений в лог видимым
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#93a1a1;font-style:italic">&lt;/span>&lt;span style="color:#859900">SET&lt;/span> &lt;span style="color:#268bd2">client_min_messages&lt;/span> &lt;span style="color:#859900">TO&lt;/span> &lt;span style="color:#268bd2">notice&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#859900">CREATE&lt;/span> &lt;span style="color:#268bd2">TEMP&lt;/span> &lt;span style="color:#859900">TABLE&lt;/span> &lt;span style="color:#268bd2">tmp&lt;/span>(&lt;span style="color:#268bd2">id&lt;/span> &lt;span style="color:#cb4b16">SERIAL&lt;/span>, &lt;span style="color:#268bd2">name&lt;/span> &lt;span style="color:#cb4b16">TEXT&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#93a1a1;font-style:italic">-- Анонимный блок DO
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#93a1a1;font-style:italic">&lt;/span>&lt;span style="color:#859900">DO&lt;/span> $$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#859900">BEGIN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#93a1a1;font-style:italic">-- Цикл LOOP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#93a1a1;font-style:italic">&lt;/span> &lt;span style="color:#268bd2">LOOP&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#859900">INSERT&lt;/span> &lt;span style="color:#859900">INTO&lt;/span> &lt;span style="color:#268bd2">tmp&lt;/span>(&lt;span style="color:#268bd2">name&lt;/span>) &lt;span style="color:#859900">VALUES&lt;/span>(&lt;span style="color:#268bd2">gen_random_uuid&lt;/span>()::&lt;span style="color:#cb4b16">TEXT&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#93a1a1;font-style:italic">-- Условный оператор IF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#93a1a1;font-style:italic">&lt;/span> &lt;span style="color:#859900">IF&lt;/span> (&lt;span style="color:#859900">SELECT&lt;/span> &lt;span style="color:#859900">MAX&lt;/span>(&lt;span style="color:#268bd2">id&lt;/span>) &lt;span style="color:#859900">FROM&lt;/span> &lt;span style="color:#268bd2">tmp&lt;/span>) &amp;gt; &lt;span style="color:#2aa198;font-weight:bold">100&lt;/span> &lt;span style="color:#859900">THEN&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">RAISE&lt;/span> &lt;span style="color:#268bd2">NOTICE&lt;/span> &lt;span style="color:#2aa198">&amp;#39;max id == %&amp;#39;&lt;/span>, (&lt;span style="color:#859900">SELECT&lt;/span> &lt;span style="color:#859900">COUNT&lt;/span>(*) &lt;span style="color:#859900">FROM&lt;/span> &lt;span style="color:#268bd2">tmp&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#268bd2">EXIT&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#859900">END&lt;/span> &lt;span style="color:#859900">IF&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#859900">END&lt;/span> &lt;span style="color:#268bd2">LOOP&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#859900">END&lt;/span> $$;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Intellij IDEA - сброс триального периода</title><link>/posts/idea-trial/</link><pubDate>Fri, 21 Jun 2019 00:00:00 +0300</pubDate><guid>/posts/idea-trial/</guid><description>&lt;p>Аж в 2016 году я тут писал о том, &lt;a href="https://dstarod.github.io/posts/remove-idea-completely/">как удалить Idea полностью&lt;/a>, чтобы начать все с начала.
Но времена меняются, и что работало раньше - не работает сейчас. Вот обновленный алгоритм для MacOS. Обратите внимание на версию Idea.&lt;/p>
&lt;p>Удаляем файлы и каталоги:&lt;/p></description></item><item><title>Создание валидной цепочки SSL сертификатов</title><link>/posts/fake-ssl-cert-chain/</link><pubDate>Thu, 17 Aug 2017 00:00:00 +0300</pubDate><guid>/posts/fake-ssl-cert-chain/</guid><description>&lt;p>Для написания тестов на валидность загружаемых сертификатов мне потребовалось создать несколько вариантов
цепочек и приватных ключей. Прошерстив некоторый объем интернета, я собрал всю необходимую информацию о том,
как локально сгенерировать корректную цепочку SSL сертификатов, которая будет проходить проверку стандартными
средствами.&lt;/p>
&lt;p>Чтобы не писать кучу команд всякий раз, напишем bash-скрипт. Для начала, зададим несколько настроечных констант:&lt;/p></description></item><item><title>Удобные команды и алиасы для GIT</title><link>/posts/git-tricks-and-aliases-with-fish/</link><pubDate>Thu, 27 Jul 2017 00:00:00 +0300</pubDate><guid>/posts/git-tricks-and-aliases-with-fish/</guid><description>&lt;p>Несколько удобных алиасов для git, чтобы не потерять, положу это здесь.
Я использую оболочку &lt;a href="https://fishshell.com/">fish&lt;/a>, поэтому возможно какие-то команды потребуется адаптировать для вашей.
Шикарный набор советов &lt;a href="https://github.com/git-tips/tips">здесь&lt;/a>.&lt;/p>
&lt;p>Лог в виде дерева:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#859900">function&lt;/span> gl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git log --oneline --decorate --graph --all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Интерактивный rebase с указанного в аргументах коммита:&lt;/p></description></item><item><title>Плагин для Sublime Text своими руками</title><link>/posts/sublime-plugin-dict-to-json/</link><pubDate>Thu, 13 Apr 2017 00:00:00 +0300</pubDate><guid>/posts/sublime-plugin-dict-to-json/</guid><description>&lt;p>Не секрет, что одним из самых популярных редакторов кода у разработчиков на сегодняшний день
является &lt;a href="https://www.sublimetext.com/">Sublime Text&lt;/a>. Кроме своих индивидуальных киллер-фич,
которые вскоре стали копировать разработчики других продуктов той-же ниши
(например, мультиредактирование), он хорош своей расширяемостью плагинами, коих великое множество на любой вкус. Думаю, не последней причиной такого их количества является простота создания. Для примера возьмем и напишем полезный инструмент, который будет брать как попало отформатированный Python-словарь и выдавать JSON стройными рядами.&lt;/p></description></item><item><title>Как остановить зависшую транзакцию в PostgreSQL</title><link>/posts/terminate-transaction-lock-postgres/</link><pubDate>Mon, 09 Jan 2017 00:00:00 +0300</pubDate><guid>/posts/terminate-transaction-lock-postgres/</guid><description>&lt;p>Сегодня PostgreSQL является одной из самых популярных СУБД, и, судя по новостям, многие крупные конторы переходят на ее использование
с коммерческих продуктов признанных лидеров софтверного фронта. Поэтому думаю, что пошаговое решение ситуации с остановкой зависшей
транзакции будет полезно многим. Я столкнулся с таковой, применяя транзакцию, создающую внешний ключ к заблокированной таблице.&lt;/p></description></item><item><title>Полное удаление Intellij IDEA или Вечный Триал</title><link>/posts/remove-idea-completely/</link><pubDate>Wed, 21 Sep 2016 00:00:00 +0300</pubDate><guid>/posts/remove-idea-completely/</guid><description>&lt;p>Одна из самых шикарных IDE для full-stack разработки - Intellij IDEA. Community версия бесплатна, и для разработки на Java/Android ее хватит за глаза.
А если приходится писать на Python, PL/SQL, Groovy, JavaScript, и еще горсточке языков? Тут только Professional вариант, вот только он стоит денег, хоть он того и стоит.
Конечно, для начала вам предлагается пробный период на месяц, в течении которого можно успеть по достоинству оценить эту IDE.
Но что, если пробный период закончился, а денег на приобретение все еще нет?&lt;/p></description></item><item><title>Python и пляски с процессами</title><link>/posts/python-grandchilds/</link><pubDate>Thu, 01 Sep 2016 00:00:00 +0300</pubDate><guid>/posts/python-grandchilds/</guid><description>&lt;p>Про использование нескольких процессов в Python уже написано невообразимое множество статей, хороших и не очень;
сломано немало копий в обсуждении проблемы GIL и псевдопотоков. Я же просто хочу рассказать о том, как решалась
задача с управлением небольшого дерева дочерних процессов.&lt;/p>
&lt;p>Итак, исходная ситуация. Основной процесс запускает два дочерних, используя &lt;code>multiprocessing.Process&lt;/code>, передает туда
очередь &lt;code>multiprocessing.Queue&lt;/code>. Первый дочерний процесс просто собирает какие-то данные и пишет в очередь,
второй же запускает еще несколько процессов, куда передает ту-же очередь, с которой они и работают.&lt;/p></description></item><item><title>Python NLTK + Stanford NLP</title><link>/posts/python-nltk-stanford-nlp/</link><pubDate>Fri, 29 Jan 2016 00:00:00 +0300</pubDate><guid>/posts/python-nltk-stanford-nlp/</guid><description>&lt;p>Как известно, в Python стандартом работы с натуральным языком де-факто является NLTK. Несмотря на это, я довольно долго использовал Pattern от CLiPS из-за его простоты и скорости (многие отмечают тормознутость NLTK).&lt;/p>
&lt;p>Но наступил момент, когда почти вся кодовая база была успешно портирована на Python 3.5, а разработчики Pattern так и не сделали версию с поддержкой третьей версии. И, судя по всему, не собираются.&lt;/p></description></item><item><title>Postgres: generate the most large followers intersections</title><link>/posts/postgres-generate-most-large-followers/</link><pubDate>Tue, 19 Jan 2016 00:00:00 +0300</pubDate><guid>/posts/postgres-generate-most-large-followers/</guid><description>&lt;p>Задача: получить список пользователей твиттера, с которыми у одного из них есть общие фоловеры, и отсортировать по их количеству. Лучше всего продемонстрировать на примере. Создадим таблицу с идентификаторами пользователей и фоловеров:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#859900">CREATE&lt;/span> &lt;span style="color:#268bd2">TEMP&lt;/span> &lt;span style="color:#859900">TABLE&lt;/span> &lt;span style="color:#268bd2">f&lt;/span>(&lt;span style="color:#268bd2">uid&lt;/span> &lt;span style="color:#cb4b16">INT&lt;/span>, &lt;span style="color:#268bd2">fid&lt;/span> &lt;span style="color:#cb4b16">INT&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#859900">INSERT&lt;/span> &lt;span style="color:#859900">INTO&lt;/span> &lt;span style="color:#268bd2">f&lt;/span>(&lt;span style="color:#268bd2">uid&lt;/span>, &lt;span style="color:#268bd2">fid&lt;/span>) &lt;span style="color:#859900">VALUES&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#2aa198;font-weight:bold">1&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">10&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">1&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">11&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">1&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">12&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">1&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">13&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">1&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">14&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#2aa198;font-weight:bold">2&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">10&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">2&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">11&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">2&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">12&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#2aa198;font-weight:bold">3&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">13&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">3&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">14&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#2aa198;font-weight:bold">4&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">13&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">4&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">14&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">4&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">10&lt;/span>), (&lt;span style="color:#2aa198;font-weight:bold">4&lt;/span>, &lt;span style="color:#2aa198;font-weight:bold">11&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>А вот собственно и запрос, интересуют пересечения с пользователем 2, самые большие сверху.&lt;/p></description></item></channel></rss>