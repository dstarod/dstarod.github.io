<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Круг интересов</title><link>https://dstarod.github.io/tags/python/</link><description>Recent content in Python on Круг интересов</description><generator>Hugo</generator><language>ru-RU</language><lastBuildDate>Thu, 17 Aug 2017 00:00:00 +0300</lastBuildDate><atom:link href="https://dstarod.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Создание валидной цепочки SSL сертификатов</title><link>https://dstarod.github.io/posts/2017/08/fake-ssl-cert-chain/</link><pubDate>Thu, 17 Aug 2017 00:00:00 +0300</pubDate><guid>https://dstarod.github.io/posts/2017/08/fake-ssl-cert-chain/</guid><description>&lt;p>Для написания тестов на валидность загружаемых сертификатов мне потребовалось создать несколько вариантов
цепочек и приватных ключей. Прошерстив некоторый объем интернета, я собрал всю необходимую информацию о том,
как локально сгенерировать корректную цепочку SSL сертификатов, которая будет проходить проверку стандартными
средствами.&lt;/p>
&lt;p>Чтобы не писать кучу команд всякий раз, напишем bash-скрипт. Для начала, зададим несколько настроечных констант:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#586e75;background-color:#eee8d5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">CSR_FILE&lt;/span>=&lt;span style="color:#2aa198">&amp;#34;csrfile.csr&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">KEY_BITS&lt;/span>=&lt;span style="color:#2aa198;font-weight:bold">2048&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">CONF_DIR&lt;/span>=&lt;span style="color:#2aa198">&amp;#34;conf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#268bd2">CHAIN_CRT&lt;/span>=&lt;span style="color:#2aa198">&amp;#34;ca_chain.crt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Затем пара функций для подготовки и последующей подчистки каталога с настройками:&lt;/p></description></item><item><title>Python и пляски с процессами</title><link>https://dstarod.github.io/posts/2016/09/python-grandchilds/</link><pubDate>Thu, 01 Sep 2016 00:00:00 +0300</pubDate><guid>https://dstarod.github.io/posts/2016/09/python-grandchilds/</guid><description>&lt;p>Про использование нескольких процессов в Python уже написано невообразимое множество статей, хороших и не очень;
сломано немало копий в обсуждении проблемы GIL и псевдопотоков. Я же просто хочу рассказать о том, как решалась
задача с управлением небольшого дерева дочерних процессов.&lt;/p>
&lt;p>Итак, исходная ситуация. Основной процесс запускает два дочерних, используя &lt;code>multiprocessing.Process&lt;/code>, передает туда
очередь &lt;code>multiprocessing.Queue&lt;/code>. Первый дочерний процесс просто собирает какие-то данные и пишет в очередь,
второй же запускает еще несколько процессов, куда передает ту-же очередь, с которой они и работают.&lt;/p></description></item><item><title>Python NLTK + Stanford NLP</title><link>https://dstarod.github.io/posts/2016/01/python-nltk-stanford-nlp/</link><pubDate>Fri, 29 Jan 2016 00:00:00 +0300</pubDate><guid>https://dstarod.github.io/posts/2016/01/python-nltk-stanford-nlp/</guid><description>&lt;p>Как известно, в Python стандартом работы с натуральным языком де-факто является NLTK. Несмотря на это, я довольно долго использовал Pattern от CLiPS из-за его простоты и скорости (многие отмечают тормознутость NLTK).&lt;/p>
&lt;p>Но наступил момент, когда почти вся кодовая база была успешно портирована на Python 3.5, а разработчики Pattern так и не сделали версию с поддержкой третьей версии. И, судя по всему, не собираются.&lt;/p>
&lt;p>Что-ж, будем использовать NLTK. От него мне нужны: токенизация, выделение POS (part-of-speech), получение N-grams и классификация твитов на группы с использованием Naive Bayes. Все это дело на Python 3.5.&lt;/p></description></item></channel></rss>