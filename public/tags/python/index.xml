<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Круг интересов</title><link>/tags/python/</link><description>Recent content in Python on Круг интересов</description><generator>Hugo</generator><language>ru-RU</language><lastBuildDate>Wed, 09 Jul 2025 15:51:32 +0300</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>MCP-сервер для ИИ-агента</title><link>/posts/mcp-server-ai-agent-python/</link><pubDate>Wed, 09 Jul 2025 15:51:32 +0300</pubDate><guid>/posts/mcp-server-ai-agent-python/</guid><description>&lt;p>Совсем недавно я рассказывал о том, &lt;a href="https://dstarod.github.io/posts/ai-agent-python-with-langchain-and-tools/">как создать ИИ-агента и дать ему в руки инструменты&lt;/a>, чтобы взаимодействовать с реальным миром. Сегодня я покажу пример, как сделать шаг вперед - создать MCP-сервер, который будет предоставлять инструменты для LLM в согласии с современными стандартами отрасли. О том, что это такое и откуда у него растут ножки, можно почитать в интернетах, или &lt;a href="https://www.perplexity.ai/search/212a11a5-84dd-4f7b-b697-f1162384c2a3">вот вам собранная Perplexity статья&lt;/a>.&lt;/p></description></item><item><title>Создание ИИ-агента на Python</title><link>/posts/ai-agent-python-with-langchain-and-tools/</link><pubDate>Sat, 05 Jul 2025 16:00:07 +0300</pubDate><guid>/posts/ai-agent-python-with-langchain-and-tools/</guid><description>&lt;p>ИИ шагает по планете с такой скоростью, что это пугает. Но лучше не пугаться, а постараться вспрыгнуть на эту волну и прокатиться на ней.
Самое популярное, с чем мы сталкиваемся каждый день - это LLM (Large Language Model), говорящие ИИ-боты. Они много что могут нам рассказать, но вот ручек и ножек им не завезли.
Другое дело - ИИ-агенты, это по сути те-же LLM, но с ручками и ножками. То есть с инструментами.
Имея доступ к LLM (публичной или локальной) можно своими руками приделать им недостающие конечности и соорудить маленького, но своего Джарвиса.
Я продемонстрирую, как это сделать с помощью Python и библиотеки &lt;a href="https://www.langchain.com">LangChain&lt;/a>.&lt;/p></description></item><item><title>Скрипт конвертации Perplexity ссылок</title><link>/posts/perplexity-copy-links-markdown-convert/</link><pubDate>Tue, 01 Jul 2025 20:45:42 +0300</pubDate><guid>/posts/perplexity-copy-links-markdown-convert/</guid><description>&lt;p>К сожалению, когда копируешь (кнопкой &amp;ldquo;Копировать&amp;rdquo;) исследования Perplexity он генерирует документы, которые не совсем Markdown - ссылки на источники он помещает в конце документа, а в тексте остаются только некликабельные указатели типа &lt;code>[10]&lt;/code>. Это неудобно, если хочешь поместить исследование например в Obsidian.
Нагенерил скрипт, который это исправляет. Не сильно фонтан, но может кому сэкономит немного времени.&lt;/p></description></item><item><title>Создание валидной цепочки SSL сертификатов</title><link>/posts/fake-ssl-cert-chain/</link><pubDate>Thu, 17 Aug 2017 00:00:00 +0300</pubDate><guid>/posts/fake-ssl-cert-chain/</guid><description>&lt;p>Для написания тестов на валидность загружаемых сертификатов мне потребовалось создать несколько вариантов
цепочек и приватных ключей. Прошерстив некоторый объем интернета, я собрал всю необходимую информацию о том,
как локально сгенерировать корректную цепочку SSL сертификатов, которая будет проходить проверку стандартными
средствами.&lt;/p>
&lt;p>Чтобы не писать кучу команд всякий раз, напишем bash-скрипт. Для начала, зададим несколько настроечных констант:&lt;/p></description></item><item><title>Python и пляски с процессами</title><link>/posts/python-grandchilds/</link><pubDate>Thu, 01 Sep 2016 00:00:00 +0300</pubDate><guid>/posts/python-grandchilds/</guid><description>&lt;p>Про использование нескольких процессов в Python уже написано невообразимое множество статей, хороших и не очень;
сломано немало копий в обсуждении проблемы GIL и псевдопотоков. Я же просто хочу рассказать о том, как решалась
задача с управлением небольшого дерева дочерних процессов.&lt;/p>
&lt;p>Итак, исходная ситуация. Основной процесс запускает два дочерних, используя &lt;code>multiprocessing.Process&lt;/code>, передает туда
очередь &lt;code>multiprocessing.Queue&lt;/code>. Первый дочерний процесс просто собирает какие-то данные и пишет в очередь,
второй же запускает еще несколько процессов, куда передает ту-же очередь, с которой они и работают.&lt;/p></description></item><item><title>Python NLTK + Stanford NLP</title><link>/posts/python-nltk-stanford-nlp/</link><pubDate>Fri, 29 Jan 2016 00:00:00 +0300</pubDate><guid>/posts/python-nltk-stanford-nlp/</guid><description>&lt;p>Как известно, в Python стандартом работы с натуральным языком де-факто является NLTK. Несмотря на это, я довольно долго использовал Pattern от CLiPS из-за его простоты и скорости (многие отмечают тормознутость NLTK).&lt;/p>
&lt;p>Но наступил момент, когда почти вся кодовая база была успешно портирована на Python 3.5, а разработчики Pattern так и не сделали версию с поддержкой третьей версии. И, судя по всему, не собираются.&lt;/p></description></item></channel></rss>